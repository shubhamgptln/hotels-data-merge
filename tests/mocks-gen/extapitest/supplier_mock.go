// Code generated by MockGen. DO NOT EDIT.
// Source: supplier.go

// Package extapitest is a generated GoMock package.
package extapitest

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/shubhamgptln/hotels-data-merge/app/domain/model"
)

// MockDataSupplier is a mock of DataSupplier interface.
type MockDataSupplier struct {
	ctrl     *gomock.Controller
	recorder *MockDataSupplierMockRecorder
}

// MockDataSupplierMockRecorder is the mock recorder for MockDataSupplier.
type MockDataSupplierMockRecorder struct {
	mock *MockDataSupplier
}

// NewMockDataSupplier creates a new mock instance.
func NewMockDataSupplier(ctrl *gomock.Controller) *MockDataSupplier {
	mock := &MockDataSupplier{ctrl: ctrl}
	mock.recorder = &MockDataSupplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataSupplier) EXPECT() *MockDataSupplierMockRecorder {
	return m.recorder
}

// FetchHotelsData mocks base method.
func (m *MockDataSupplier) FetchHotelsData(ctx context.Context) ([]*model.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchHotelsData", ctx)
	ret0, _ := ret[0].([]*model.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchHotelsData indicates an expected call of FetchHotelsData.
func (mr *MockDataSupplierMockRecorder) FetchHotelsData(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchHotelsData", reflect.TypeOf((*MockDataSupplier)(nil).FetchHotelsData), ctx)
}
