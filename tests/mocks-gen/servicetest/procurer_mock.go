// Code generated by MockGen. DO NOT EDIT.
// Source: procurer.go

// Package servicetest is a generated GoMock package.
package servicetest

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/shubhamgptln/hotels-data-merge/app/domain/model"
)

// MockDataFetcher is a mock of DataFetcher interface.
type MockDataFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockDataFetcherMockRecorder
}

// MockDataFetcherMockRecorder is the mock recorder for MockDataFetcher.
type MockDataFetcherMockRecorder struct {
	mock *MockDataFetcher
}

// NewMockDataFetcher creates a new mock instance.
func NewMockDataFetcher(ctrl *gomock.Controller) *MockDataFetcher {
	mock := &MockDataFetcher{ctrl: ctrl}
	mock.recorder = &MockDataFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataFetcher) EXPECT() *MockDataFetcherMockRecorder {
	return m.recorder
}

// GatherDataWithFiltering mocks base method.
func (m *MockDataFetcher) GatherDataWithFiltering(ctx context.Context, hotelIDs []string, destinationID int64) (map[string][]*model.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GatherDataWithFiltering", ctx, hotelIDs, destinationID)
	ret0, _ := ret[0].(map[string][]*model.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GatherDataWithFiltering indicates an expected call of GatherDataWithFiltering.
func (mr *MockDataFetcherMockRecorder) GatherDataWithFiltering(ctx, hotelIDs, destinationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GatherDataWithFiltering", reflect.TypeOf((*MockDataFetcher)(nil).GatherDataWithFiltering), ctx, hotelIDs, destinationID)
}

// MockDataMerger is a mock of DataMerger interface.
type MockDataMerger struct {
	ctrl     *gomock.Controller
	recorder *MockDataMergerMockRecorder
}

// MockDataMergerMockRecorder is the mock recorder for MockDataMerger.
type MockDataMergerMockRecorder struct {
	mock *MockDataMerger
}

// NewMockDataMerger creates a new mock instance.
func NewMockDataMerger(ctrl *gomock.Controller) *MockDataMerger {
	mock := &MockDataMerger{ctrl: ctrl}
	mock.recorder = &MockDataMergerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataMerger) EXPECT() *MockDataMergerMockRecorder {
	return m.recorder
}

// FetchBestHotelData mocks base method.
func (m *MockDataMerger) FetchBestHotelData(ctx context.Context, hotelIDs []string, destinationID int64) ([]*model.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchBestHotelData", ctx, hotelIDs, destinationID)
	ret0, _ := ret[0].([]*model.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBestHotelData indicates an expected call of FetchBestHotelData.
func (mr *MockDataMergerMockRecorder) FetchBestHotelData(ctx, hotelIDs, destinationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBestHotelData", reflect.TypeOf((*MockDataMerger)(nil).FetchBestHotelData), ctx, hotelIDs, destinationID)
}

// MergeDataFromSuppliers mocks base method.
func (m *MockDataMerger) MergeDataFromSuppliers(ctx context.Context, data map[string][]*model.Hotel) ([]*model.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeDataFromSuppliers", ctx, data)
	ret0, _ := ret[0].([]*model.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeDataFromSuppliers indicates an expected call of MergeDataFromSuppliers.
func (mr *MockDataMergerMockRecorder) MergeDataFromSuppliers(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeDataFromSuppliers", reflect.TypeOf((*MockDataMerger)(nil).MergeDataFromSuppliers), ctx, data)
}
